***************************************************
***************************************************
Angular JS - Codecademy 
***************************************************
***************************************************

A Module 
-	A module contains the different components of an AngularJS app. 
-	Anuglar JS has directives which it uses to define application scopes.One of such directives is "ng-app"
-	Directive also tells where the module will live. This is mostly in tags. 

A Controller 
-	A controller manages the app's data 
-	A controler also helps to attach $this data to a specific scope.

An Expression 
An expression is used to display values on the page.
Expression Syntax: 	"{{..Value to be displayed}}

A Fileter 
A filter formats the value of an expression. This is done using the "pipe" (|) 


Summarily, 
	A module has to be created that imports all anuglar re-usable components 
	A scope have to be defined for this module to live. That is this anuglar application will only be accessible within the scope of this tab. That is accessibe to all descendants of this tags. 
	<body ng-app ="myApp"> //where myApp is the name of the creted module. 
		
		<div ng-controller="myController> //This directive points to the controller that will be usedby this tag. 
			{{ //Display Data from the controller}}	
		</div>
	</body> 

	Note: Only descendants of a particular defined scope can use the controller's produce..

Some Directives 
ng-app    	 - Points to a module 
ng-controller 	 - Points to a controller 	
ng-repeat 	 - Repeats a data-item in the controller 
ng-src 		 - Points to an image resource in the controller 
ng-click 	




***************************************************
***************************************************
Angular JS - Three House 
***************************************************
***************************************************
There are two kinds of jaascript libraries 
	- DOM manipuatlion libraries such as JQUERY which simply presents data based on a view and it is a one way data binding. 
	- MVC frameworks libraries such as Anuglar JS which offers two way data binding which makes it possible to change views based on data and user interractions. 

Four main compoenents of angular 
	- Directives 
	- Controlers 
	- Factories 
	- Filters

Two-way data binding 
Use the ng-model directive. This does binding of the view to the model such that any changes in both direction automatically reflects in both directio
One way binding 
Use the expression {{}} for this. This only makes it possible to read form the model for display in the view ONLY. 




***************************************************
***************************************************
Angular JS - Chandermani
***************************************************
***************************************************
It's a good practice to alwayys think deeply about the functionality of your app. This will largely reduce friction between the model, view and the controller. 


- The controller manages the VIEW and the MODEL 


- Creating a Module 
	"angular.module("app", []);
		where 	
		"app" is the name of the module 
		[] provides module dependecies.... COOL! 



- Registering a controller with a module 
		angular.module("app", []).controller('controllerName', 'controllerRealImplementation'); 


- Register the View that must connects to the controller with the controller by using 
		- ng-controller  = 'controllerName' withing the opening tags of this view top-element. 


Interpolation Symbols and Directives
	The interpolation symbol is {{..expression...}} 
	They are used to link the view and the model for data extraction. 
	An interpolation symbol may contain 
		- modelel's data (literal expressions or variables) 
		- functions 
		- objects. 

	Interpolation symbol can be used in this way 
		- <>{{}}</> - as tags values 
		- <div name={{..}}></div>  - elements attribute's value 
		- <div {{..}} = value></div> - element's attribute name 


Directives 
Directives are used to extend the standard HTML vocabulary,, augment the html vocabulary and even enable us create new html elements. Cool!...
- ng-model - binds a scope property to an HTML element. Such that changes in eithe  of the two entities automatically affects the other. - Taken! 
- ng-click - listens for click event on an html element and invokes a given function in the controller.  
- ng-app - instantiates an app 
- ng-show - shows a given element based on the result value 
* With directives, we can demarcate what part of HTML should use angular. 


Expressions 
	- Expressions aer evaluated against the SCOPE object 
	- Expressions are forgiving that is an undefined variable will instead of give an error result to undefined or null. 
	- Conditionals, loops and exceptions are not alllowed as an expression 
	- Expressions can be filtered to produce a more desirable result. 
	- Itenaries can be used instead of if/else/switch conditionals in an expression 
	- functions can be used in an expression 
	- Objects can be used in an expression 
	- assignments can be made in an expression. 
	Note: When an expression starts to become compleX MOVE IT INTO A CONTROLLER. 


Bindings 
Helps to bind the view nd the model. 

Controllers 
When you are writing controller never ever ever reference the DOM element in the controller use instead directives or create your own DOM. 

SCOPE 
The scope object is not the model but it references a model. 
	- Batarang is a chrome extension that reveals information about the avaialble scopes of of an app. 
	- All scoped objects are scoped 
	- Scope objects bind the view and model together.
	• Scope objects are almost always linked to a view element.
	• There can be more than one scope object defined for an application. In fact,
		in any decent size app there are a number of scopes active during any given time.
	• More often than not, child scopes inherit from their parent scope and can access parent scope data.
	
	* The ng-controller creates a new scope. A new scope can also be created with some other specific directives..

AngularJS Constructs 
	- Controllers 
	- Directives 
	- Services 
	- Filters 


Services 
Services are used to ORGANIZE REUSABLE chunk of CODES that can be shared across controllers, directives, filters and services itself. 


Filters 
Filters are used to change data from format to another. 


Organizing Angular Codes in Files 
	- FILES Per Componenet Type: In this approach all controllers are kept in one file, directives in another file, services in another file and filters in another file with the right ".js" extension. 
		* This is feasible for small or decent sized applications but infeasible for large applications as everyting gets messy and out of control. 

	- FOLDER per component Type: This encourages keeping each component in separate folders. 
		* Works well for smaller projects too. 
	
	- FEATURE per component Type: This encourages separating features and making each features has its own components. 
		* With this approach common code needed across each features can be placed in a common folder 
		* This also gives room for modularization. COOL!


NOTES: 
* Create just ONE controller per page/view. But directives, filters and services can be shared across multiple views/page of d same feature. 
* Models can be defined as colection of data whcih can be created using functions, objects or classes. Since Javascript does not support "classes" it will be simulated using new classname({}); 
* Dependency injection can be done via 1. Constructor Injection OR 2. property injection 

MODULES 
Modules are like containers for components we create. 

AngularJS makes heavy use of dependency injection as such minifying angular codes will result an error as all white spaces, comments are removed and the the "$scope" injected can no longer be resolved as DI Object. 
To handle this, we make use of annotation which are 
		1: $injection annotation 
		2. inline annotation. This makes use of the [] construct. 

- mimimize the number of propeties and functions you attach to the $scope object. Since these are required to be referenced in the VIEW. 

******************************************************************
Rule of Thumb: If it is not for the View don't attach to a scope. 
******************************************************************

$watch - Model Tracking infrastructure  (Packaged with angular just like $interval) 
	- This is usually called on the $scope object since it is use to monitor changes in models with are binded to $scope. 
$interval is also an angualar service 

The promise API supports method chaining over nesting. It's cool anyway. 

SPA (Single Page Application..Google is one of those companies that implemented SPA. They did this on their Google Mail. 

NG-VIEW 
	-  This directive is used to host partial HTML Templates sent from the server. 
	-  The AngularJS route service is used to determine what ng-view to load and at what time to load it. 


Note: 	Both the NG-VIEW AND NG-INCLUDE loads HTML template. The ng-include is independent of a "route" while the ng-view is tied to a route. 
	The ng-include can be used to load template from Remmote location, files and script tags. This script tags must include "type=text/ng-template" and and "id=a name" for angular to reference it.
	If the partial view is small it can be included in the parent scope as a script tag but when it starts to grow it is best to include it in a separate file. 


OK. cHECK tHIS oUT!!!!
Every angular app goes through two stages befoer actual intialzation. These stages include
* Config 
* Run 

* The config stage or callback is a chained method attached to the module and it is executed before the module is initialized. Therefore, all basic before-application-startup setup should be done here. These config callback does not acept services, classes or objects. It only accepts providers which are special calsses 
* The Run stage is also a chainable callback to the module whciih can be used to define some things to e done while the application is running. 

NOTE: Any thing that needs to be done before the app module is usable or finally initialized should go in the config() method. E.G. (Providers such as nrRoute)
	
AngularJS FILTERS 
	Filters are used to format the value of an expression. 
	It takest he format "{{ expression | filterName : inputParam1 }}" 
	They can be used across views, services, controllers e.t.c. 
Fileters offer a great way to change the model source format without having to touch the model itself. 


NG-CLASS 
	This is used to dynamically set the class of an element based on some CONDITIONS 
	This class works with "string, arrays or objects" page 130

Isolated Scope 
	In AngularJS, isolated scopes are scopes that do not inherit from their parent scope and hence do not have access to parent scope properties.
	Declaration: $scope.$new(true)... the 'true' indictes that it does not inherit from its partent scope and thus isolated. 


ANGULAR SERVICES 
	- Services aer simply reuseable piece of code that can be used across diferent angular constructs such as controllers, directives, e.t.c. 
	- Services are generally not expected to interact with DOM but there are some exceptions such as the $modal service. 
	- Commmon examples of services include $location, $interval, $timeout e.t.c. 
	- Angular built-in services (such as the ones mentioned aboved) unlike providers are part of the coore-angular module and just needs to be injected.. 
	
	Xteristics of Services 
	- Singleton in Nature, Creaed only on Demand, Maintains state across all constructs, injectable
	
	Angular Framework services are prefixed with the "$" signs 
	Do not prefix your own custom services with a "$" sign. 

	Ways of Creating a Service in Angular 
	- .Using constant, value, service, provider, factory 
		
	Constatns and Values 
	When using the ".constant" to create a service it must be used in the config method. That is this tye of service must be loaded while the application is being configured. 
	When using the ."value" to crate a servicce, IT should not be used in the config but rather in anyother construct after successful bootstrapping of the angular service module. 
	Both the .constant .value recipes of creating a service do not permit any DEPENDENCIES to be injected. 	

	Service
	Services created using the ".service" can accept dependencies and it is invoked using the constructor function. 
	The AF treats this service as a cosntructor function 	
	
	Factory (".factory")
	Similar to the service way of creating a service but in this case an object is RETURNED. Unlike service that never returns an object but rather used
	The AF treats this service as an object 
		
	Provider 
	The provider way of creating a service works more like the factory as it returns a service object.. 
	The provider unlike the factory method exposes its returned objects through a "$get" 
	The provider unlike the factory accepts dependency only in the "$get" construct and not in the root callback 
	The provider service should be invoked in the configuration stage like the .constant recipe of creating service. This is because some part of its construct needs to be inject during configuration 

Note 	Since $scope is contextually bind to the view and gets destroy whenever the view is destroyed, it is not a good deal to inject any current $scope to services since services are treated as singletons which are available throghout the lifetime of the aplication and are also resuable codes across diverse constrcts having different scopes.. 
	We can only inject $rootScope in a service. 
	All other scopes e.g. those called by other directives such as ng-controller, ng-view, ng-iiclude are child  of the $rootScope.. 

Anuglar JS EVENTING
	Events can be published 
	Published events can be subscribed.

	Publishing
	- $scope.$emit(eventName, args)
	- $scope.$broadcast(eventName, args)

	Subscribing 
	- $scope.$on(eventName, Listener(e, args) 
	  An event can only be subscribed for if it has been published by one of the publishers above. 

	Events are good way to notify all participants of the application that something has happened. 

	The difference between $emit and $braodcast is that 
	- $broadcast propagates down.. That is once an event is broadcasted from a scope.. All direct descendats of the scope of this scope gets the event and subscribe for the event. 
	- Also broadcasted events can not be cancelled
	- Emitted events goes up the hierearchy.. therefore events can only be emitted by child scopes and subscribed for by parent scopes. This type of event can be cancelled. 
	- All scopes are child/descendant of the $rootScope. 
	COOL!!!!




*********************************************************************************************************************************************
Quick Overview 
Anuglar Constructs 
- Module
	* Extenal Modules 
	- angular-animate
	- angular-route
	- angular-sanitize
	- angulae-media-player 
	- angular-local-storage (for browseer dependent persistence) COOL!!!.. 
	Note: Modules are injected on the root app Module to: 
	1. Inject some of their shipped-dependencies.  
	2. The import some of their shipped-directives for use. e.g. ng-bind-html(sanitize) media-player(media-player)
	3. To use them as providers which would be registered on the app.module.config(); COOL!!!!

- Services 
	* ngRoute (Used for in page routng coupled with the (ng-view) directive. (I love this Angular-Routing). All route templates will be loaded where the ng-view resides whenever a request hits them. 
	- $interval (Works like the setTImeOut)
	- $watch (This is a simple change listener) 
	- $location (Helps in redirecting from a controller given a named route. Built on the windows.location javascript fnction.
	- Angular.forEach(array, callback(variableThatToRepresentAnArrayMember)
	- ngSanitize - This is used when using (ng-bind-html to bind html tags for display). It is used to sanitize this tags and pervent binding of malicious codes such as executable script tags e.t.c. 

- Directives 
	- ng-view
	- ng-include
	- ng-src
	- ng-style
	- ng-app
	- ng-controller
	- ng-class
	- ng-show
	- ng-hide
	- ng-bind-html (This is used to render HTML tags with their normal behaviour. Since angular esapes HTML tags by default to prevent attacks. This is done by the Strict Contextual Escapeing(SCE)
		* ngSanitize must be enabled for ng-bind-html to work as expected.... 
	- ng-repeat - This is used to access the value of an array in a view. (ng-repea = "a in object.array" ...//do something)
	- ng-if (This creates or destroys a DOM element based on conditions. This is similar to ng-show and ng-hide but the lattter wrks on css styling dan DOM elements. 
	- ng-keypress
	- ng-keydown
	- ng-keyup

- Scope 
- Controller 
- Filter
- Dependencies 
- Injections 

SERVICES 
$watch
$interval
$route 
While some services are immediately part of the angular module on installation, some are not.The ngRoute service is not part of the angular module and must be imported to use. 


PROVIDERS 
	- routeProivder - Enables routing 
	- sceDelegateProvider - This makes it possible to accept contents from  other origins.... 
		* Where SCE stands for (Strict Contextual Esca)... 


************************************************************************************************************************
Angular - Brad Green 
	
	Set up the initial state in your application