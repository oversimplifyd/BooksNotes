Learning JavaEE 

JavaEE is multi-tiered consisting of 
Application Tier (Appleets, Application(GUI) Web Client) Static content goes here 
Web Tier (JavaServerPages, JavaServerFaces and Servlets(Servlets handles dynamic request/response)
Business Tier (EJB..JPA) 
Enterprise Information System Tier (EIS) DB tier 

Containers are the interface between a component and the low-level platform-specific
functionality that supports the component. Before it can be executed, a web, enterprise bean, or
application client component must be assembled into a Java EE module and deployed into its
container. The assembly process involves specifying container settings for each component in the Java EE
application and for the Java EE application itself. Container settings customize the underlying
support provided by the Java EE server, including such services as security, transaction
management, Java Naming and Directory Interface (JNDI) API lookups, and remote
connectivity. Here are some of the highlights.


EJB modules, which contain class files for enterprise beans and, optionally, an EJB
deployment descriptor. EJB modules are packaged as JAR files with a .jar extension.
Web modules, which contain servlet class files, web files, supporting class files, image and
   HTML files, and, optionally, a web application deployment descriptor. Web modules are
  packaged as JAR files with a .war (web archive) extension.
Application client modules, which contain class files and, optionally, an application client
   deployment descriptor. Application client modules are packaged as JAR files with a .jar
  extension.
Resource adapter modules, which contain all Java interfaces, classes, native libraries, and,
   optionally, a resource adapter deployment descriptor. Together, these implement the
  Connector architecture (see “Java EE Connector Architecture” on page 63) for a particular
     EIS. Resource adapter modules are packaged as JAR files with an .rar (resource adapter
    archive) extension.

An Enterprise JavaBeans (EJB) component, or enterprise bean, is a body of code having FIELDS and
METHODS to implement modules of business logic. 

Enterprise beans are either session beans or message-driven beans.
A session bean represents a transient conversation with a client. When the client finishes
executing, the session bean and its data are gone.
A message-driven bean combines features of a session bean and a message listener, allowing
a business component to receive messages asynchronously. Commonly, these are Java
Message Service (JMS) messages.


Types of Web Applications 
Presentation Oriented (Makes use of HTML, XHTML or XML for presentation ) 
Service oriented (Presentation Orieented web apps are mostly the client of service oriented) 

Developing Web App... 
A web container is needed to develop a web app. THis container helps to handle some core web features such as provides such services as request dispatching, security, concurrency, and lifecycle management. A web container also gives web components access to such APIs as naming, transactions, and email. Web applications behaviour configuration are done using an XML file oro a Deployment Descriptor (DD).. 

Steps... 
 Develop the web component code.
2. Develop the web application deployment descriptor, if necessary.
3. Compile the web application components and helper classes referenced by the components.
4. Optionally, package the application into a deployable unit.
5. Deploy the application into a web container.
6. Access a URL that references the web application.



































POJO (Plain Old java Object) 
SOAP (Simple Object Access Protocol) 

While HTTP is a standared text-based protocol for handling request and responses over the internet, SOAP is an XML-based protocol that handles request/reponse using XML folloing the HTTP model. 


